{"version":3,"sources":["Board.js","App.js","index.js"],"names":["Board","board","updateBoard","className","map","column","columnIndex","key","onClick","token","rowIndex","color","generateHeight","generateColumns","App","arr","Array","fill","useState","setBoard","turn","setTurn","gameOn","setGame","counter","setCounter","message","setMessage","history","setHistory","setColor","href","aria-hidden","x","newBoard","columns","row","player","classColor","y","length","prevCounter","prevBoards","concat","horizontal","count","right","left","getHorizontalCount","vertical","getVerticalCount","rise","top","bottom","getRiseCount","fall","getFallCount","prevHistory","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef58e905.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Board({ board, updateBoard }) {\n    function generateColumns(board) {\n        return board.map((column, columnIndex) => {\n            return (\n                <div className='column' key={columnIndex} onClick={() => handleClick(columnIndex)}>\n                    {generateHeight(column, columnIndex)}\n                </div>\n            );\n        });\n    }\n\n    function generateHeight(column, columnIndex) {\n        return column.map((token, rowIndex) => {\n            let color = \"circle\";\n            if (token === \"O\") {\n                color = \"circle yellow\";\n            } else if (token === \"X\") {\n                color = \"circle red\";\n            }\n            return (\n                <button key={columnIndex + \"\" + rowIndex} className={color}>\n                    {/* {columnIndex + \"\" + rowIndex} */}\n                </button>\n            );\n        });\n    }\n\n    function handleClick(index) {\n        updateBoard(index);\n    }\n\n    return <div className='board'>{generateColumns(board)}</div>;\n}\n","import React, { useState } from \"react\";\nimport Board from \"./Board.js\";\nimport \"./App.css\";\n\nexport default function App() {\n    const x = 7;\n    const y = 6;\n    const size = x * y - 1;\n    const empty = \"\";\n    const player1 = \"O\";\n    const player2 = \"X\";\n    const winCondition = 4;\n\n    const arr = Array(x)\n        .fill(empty)\n        .map(() => Array(y).fill(empty));\n\n    const [board, setBoard] = useState(arr);\n    const [turn, setTurn] = useState(true); //a toggle that cycles between p1 and p2\n    const [gameOn, setGame] = useState(true); //mainly to determine game ends before a winner\n    const [counter, setCounter] = useState(1); //for terminate game when out of spaces\n    const [message, setMessage] = useState(\"\");\n    const [history, setHistory] = useState([arr]);\n    const [color, setColor] = useState(\"message\");\n\n    function updateBoard(x) {\n        if (!gameOn) return;\n        if (board[x][0] !== empty) return setMessage(\"Column full, pick another column\");\n\n        let newBoard = board.map((columns) => columns.map((row) => row)); //make a brand new board to make changes to\n        let token = turn ? player1 : player2;\n        let player = turn ? \"Player 1\" : \"Player 2\";\n        let classColor = turn ? \"message yellow\" : \"message red\";\n\n        //check token from bottom up\n        let y = newBoard[x].length - 1;\n        for (; y >= 0; y--) {\n            if (newBoard[x][y] === empty) {\n                newBoard[x][y] = token;\n                break;\n            }\n        }\n\n        setBoard(newBoard);\n        setTurn(!turn);\n        setCounter((prevCounter) => prevCounter + 1);\n        setMessage(\"\");\n        setHistory((prevBoards) => {\n            return prevBoards.concat([newBoard]);\n        });\n        setColor(\"message\");\n\n        //get all direction counts\n        let horizontal = getHorizontalCount(x, y, token, newBoard);\n        let vertical = getVerticalCount(x, y, token, newBoard);\n        let rise = getRiseCount(x, y, token, newBoard);\n        let fall = getFallCount(x, y, token, newBoard);\n\n        //the game only ends if either player win or no more spaces left\n        if (vertical >= winCondition || horizontal >= winCondition || rise >= winCondition || fall >= winCondition) {\n            setGame(false);\n            setMessage(`Game over! ${player} Won!`);\n            setColor(classColor);\n        } else if (counter - 1 === size) {\n            setGame(false);\n            setMessage(\"Game over! Draw!\");\n        }\n    }\n\n    function getHorizontalCount(x, y, token, board) {\n        let count = 0;\n\n        //count right side\n        for (let right = x; right < board.length; right++) {\n            if (board[right][y] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //count left side\n        for (let left = x - 1; left >= 0; left--) {\n            if (board[left][y] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n\n    function getVerticalCount(x, y, token, board) {\n        let count = 0;\n\n        //count downwards\n        for (; y < board[x].length; y++) {\n            if (board[x][y] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        return count;\n    }\n\n    function getRiseCount(x, y, token, board) {\n        let count = 0;\n\n        //count top right\n        for (let right = x, top = y; right < board.length && top >= 0; right++, top--) {\n            if (board[right][top] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //count bottom left\n        for (let left = x - 1, bottom = y + 1; left >= 0 && bottom < board[x].length; left--, bottom++) {\n            if (board[left][bottom] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        return count;\n    }\n\n    function getFallCount(x, y, token, board) {\n        let count = 0;\n\n        //count bottom right\n        for (let right = x, bottom = y; right < board.length && bottom < board[x].length; right++, bottom++) {\n            if (board[right][bottom] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //count top left\n        for (let left = x - 1, top = y - 1; left >= 0 && top >= 0; left--, top--) {\n            if (board[left][top] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        return count;\n    }\n\n    function undoBoard() {\n        if (counter === 1) return;\n        setBoard(history[history.length - 2]);\n        setTurn(!turn);\n        setGame(true);\n        setCounter((prevCounter) => prevCounter - 1);\n        setMessage(\"\");\n        setHistory((prevHistory) => {\n            return prevHistory.slice(0, prevHistory.length - 1);\n        });\n        setColor(\"message\");\n    }\n\n    function resetBoard() {\n        setBoard(arr);\n        setTurn(true);\n        setGame(true);\n        setCounter(1);\n        setMessage(\"\");\n        setHistory([arr]);\n        setColor(\"message\");\n    }\n\n    return (\n        <div className='connect4'>\n            <header className='yellow'>\n                <a className='back' href='https://pcchiu96.github.io/portfolio'>\n                    <i className='fa fa-arrow-circle-left' aria-hidden='true'></i>\n                </a>\n                <div>\n                    {\" \"}\n                    Connect <span className='red'>4</span>\n                </div>\n            </header>\n            <Board board={board} updateBoard={updateBoard} />\n            <br></br>\n            <button className='b-restart' onClick={resetBoard}>\n                Restart\n            </button>\n            <button className='b-undo' onClick={undoBoard}>\n                Undo\n            </button>\n            <p className='turn-indicator'>\n                <span className={turn ? \"message yellow\" : \"message\"}>P1</span>\n                <span className={turn ? \"message\" : \"message red\"}>P2</span>\n            </p>\n            <p className={color}>{message}</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}