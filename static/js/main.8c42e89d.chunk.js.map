{"version":3,"sources":["Board.js","App.js","index.js"],"names":["Board","board","updateBoard","className","map","row","index","key","onClick","handleClick","column","columnIndex","token","rowIndex","color","generateColumns","App","arr","Array","fill","useState","setBoard","turn","setTurn","gameOn","setGame","counter","setCounter","message","setMessage","useEffect","href","aria-hidden","x","console","log","newBoard","y","length","count","down","checkVertical","right","left","checkHorizontal","top","bottom","checkRise","checkFall","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c42e89d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Board({ board, updateBoard }) {\n    function generateColumns(board) {\n        return board.map((row, index) => {\n            return (\n                <div className='column' key={index} onClick={() => handleClick(index)}>\n                    {generateHeight(board[index], index)}\n                </div>\n            );\n        });\n    }\n\n    function generateHeight(column, columnIndex) {\n        return column.map((token, rowIndex) => {\n            let color = \"circle\";\n            if (token === \"O\") {\n                color = \"circle yellow\";\n            } else if (token === \"X\") {\n                color = \"circle red\";\n            }\n            return (\n                <button key={columnIndex + \"\" + rowIndex} className={color}>\n                    {/* {columnIndex + \"\" + rowIndex} */}\n                </button>\n            );\n        });\n    }\n\n    function handleClick(index) {\n        updateBoard(index);\n    }\n\n    return <div className='board'>{generateColumns(board)}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"./Board.js\";\nimport \"./App.css\";\n\nexport default function App() {\n    const x = 7;\n    const y = 6;\n    const size = x * y;\n    const empty = \"\";\n    const player1 = \"O\";\n    const player2 = \"X\";\n    const winCondition = 4;\n\n    const arr = Array(x)\n        .fill(empty)\n        .map(() => Array(y).fill(empty));\n\n    const [board, setBoard] = useState(arr);\n    const [turn, setTurn] = useState(true);\n    const [gameOn, setGame] = useState(true);\n    const [counter, setCounter] = useState(1);\n    const [message, setMessage] = useState(\"\");\n\n    useEffect(() => {\n        //update the browser whenever board's value updates\n    }, [board]);\n\n    function updateBoard(x) {\n        if (!gameOn) return;\n\n        if (board[x][0] !== empty) {\n            setMessage(\"Column full, pick another column\");\n            console.log(\"Column full, pick another column\");\n        } else {\n            let newBoard = [...board];\n            let y = newBoard[x].length - 1;\n\n            for (; y >= 0; y--) {\n                if (newBoard[x][y] === empty) {\n                    newBoard[x][y] = turn ? player1 : player2;\n                    break;\n                }\n            }\n\n            setBoard(newBoard);\n            setTurn(!turn);\n            setCounter(counter + 1);\n            setMessage(\"Turn \" + counter);\n            console.log(\"Token: \" + counter);\n\n            if (checkVertical(x, y) || checkHorizontal(x, y) || checkRise(x, y) || checkFall(x, y)) {\n                setGame(false);\n                let winner = turn ? \"Player1\" : \"Player2\";\n                setMessage(\"Game over! \" + winner + \" Won!\");\n                console.log(\"Connect 4!\");\n\n                //TODO make connected 4 tokens glow\n            }\n\n            if (counter === size) {\n                setGame(false);\n                setMessage(\"Game over! Draw!\");\n                console.log(\"Game over\");\n            }\n        }\n    }\n\n    function checkVertical(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let down = y; down < board[x].length; down++) {\n            if (board[x][down] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        //console.log(\"vertical is \" + count);\n        return count >= 4;\n    }\n\n    function checkHorizontal(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let right = x; right < board.length; right++) {\n            if (board[right][y] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        for (let left = x - 1; left >= 0; left--) {\n            if (board[left][y] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //console.log(\"horizontal is \" + count);\n        return count >= winCondition;\n    }\n\n    function checkRise(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let right = x, top = y; right < board.length && top >= 0; right++, top--) {\n            if (board[right][top] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        for (let left = x - 1, bottom = y + 1; left >= 0 && bottom < board[x].length; left--, bottom++) {\n            if (board[left][bottom] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //console.log(\"rise is \" + count);\n        return count >= winCondition;\n    }\n\n    function checkFall(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let right = x, bottom = y; right < board.length && bottom < board[x].length; right++, bottom++) {\n            if (board[right][bottom] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        for (let left = x - 1, top = y - 1; left >= 0 && top >= 0; left--, top--) {\n            if (board[left][top] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //console.log(\"fall is \" + count);\n        return count >= winCondition;\n    }\n\n    function resetBoard() {\n        setBoard(arr);\n        setGame(true);\n        setCounter(1);\n        setMessage(\"\");\n    }\n\n    return (\n        <div className='connect4'>\n            <a className='back' href='https://pcchiu96.github.io/portfolio'>\n                <i className='fa fa-arrow-circle-left' aria-hidden='true'></i>\n            </a>\n            <header>Connect 4</header>\n            <Board board={board} updateBoard={updateBoard} />\n            <button className='b-restart' onClick={resetBoard}>\n                Restart\n            </button>\n            <p className='message'>{message}</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}