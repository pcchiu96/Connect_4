{"version":3,"sources":["Board.js","App.js","index.js"],"names":["Board","board","updateBoard","handleClick","event","target","value","className","map","row","index","key","uuidv4","column","token","color","onClick","generateHeight","generateColumns","App","arr","Array","fill","useState","setBoard","turn","setTurn","game","setGame","counter","setCounter","message","setMessage","useEffect","x","console","log","newBoard","y","length","count","down","checkVertical","right","left","checkHorizontal","top","bottom","checkRise","checkFall","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.705c5e09.chunk.js","sourcesContent":["import React from \"react\";\nimport uuidv4 from \"uuid/v4\";\n\nexport default function Board({ board, updateBoard }) {\n    function generateColumns(board) {\n        return board.map((row, index) => {\n            return (\n                <div className='column' key={uuidv4()} value={index}>\n                    {generateHeight(board[index], index)}\n                </div>\n            );\n        });\n    }\n\n    function generateHeight(column, index) {\n        return column.map((token) => {\n            let color = \"circle\";\n            if (token === \"O\") {\n                color = \"circle green\";\n            } else if (token === \"X\") {\n                color = \"circle red\";\n            }\n            return (\n                <div className='square' key={uuidv4()}>\n                    <button className={color} value={index} onClick={handleClick}></button>\n                    <br />\n                </div>\n            );\n        });\n    }\n\n    function handleClick(event) {\n        updateBoard(event.target.value);\n    }\n\n    return <div className='board'>{generateColumns(board)}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"./Board.js\";\nimport \"./App.css\";\n\nexport default function App() {\n    const x = 7;\n    const y = 6;\n    const size = x * y;\n    const empty = \"\";\n    const player1 = \"O\";\n    const player2 = \"X\";\n    const winCondition = 4;\n\n    const arr = Array(x)\n        .fill(empty)\n        .map(() => Array(y).fill(empty));\n\n    const [board, setBoard] = useState(arr);\n    const [turn, setTurn] = useState(true);\n    const [game, setGame] = useState(true);\n    const [counter, setCounter] = useState(1);\n    const [message, setMessage] = useState(\"\");\n\n    useEffect(() => {\n        //setBoard(board);\n    }, [board]);\n\n    function updateBoard(x) {\n        if (!game) return;\n\n        if (board[x][0] !== empty) {\n            setMessage(\"Column full, pick another column\");\n            console.log(\"Column full, pick another column\");\n        } else {\n            let newBoard = [...board];\n            let y = newBoard[x].length - 1;\n\n            for (; y >= 0; y--) {\n                if (newBoard[x][y] === empty) {\n                    newBoard[x][y] = turn ? player1 : player2;\n                    break;\n                }\n            }\n\n            setBoard(newBoard);\n            setTurn(!turn);\n            setCounter(counter + 1);\n            setMessage(\"Turn \" + counter);\n            console.log(\"Token: \" + counter);\n\n            if (checkVertical(x, y) || checkHorizontal(x, y) || checkRise(x, y) || checkFall(x, y)) {\n                setGame(false);\n                let winner = turn ? \"Player1\" : \"Player2\";\n                setMessage(\"Game over! \" + winner + \" Won!\");\n                console.log(\"Connect 4!\");\n\n                //TODO make connected 4 tokens glow\n            }\n\n            if (counter === size) {\n                setGame(false);\n                setMessage(\"Game over! Draw!\");\n                console.log(\"Game over\");\n            }\n        }\n    }\n\n    function checkVertical(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let down = y; down < board[x].length; down++) {\n            if (board[x][down] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        //console.log(\"vertical is \" + count);\n        return count >= 4;\n    }\n\n    function checkHorizontal(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let right = x; right < board.length; right++) {\n            if (board[right][y] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        for (let left = x - 1; left >= 0; left--) {\n            if (board[left][y] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //console.log(\"horizontal is \" + count);\n        return count >= winCondition;\n    }\n\n    function checkRise(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let right = x, top = y; right < board.length && top >= 0; right++, top--) {\n            if (board[right][top] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        for (let left = x - 1, bottom = y + 1; left >= 0 && bottom < board[x].length; left--, bottom++) {\n            if (board[left][bottom] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //console.log(\"rise is \" + count);\n        return count >= winCondition;\n    }\n\n    function checkFall(x, y) {\n        let count = 0;\n        let token = turn ? player1 : player2;\n\n        for (let right = x, bottom = y; right < board.length && bottom < board[x].length; right++, bottom++) {\n            if (board[right][bottom] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        for (let left = x - 1, top = y - 1; left >= 0 && top >= 0; left--, top--) {\n            if (board[left][top] === token) {\n                count++;\n            } else {\n                break;\n            }\n        }\n\n        //console.log(\"fall is \" + count);\n        return count >= winCondition;\n    }\n\n    function resetBoard() {\n        setBoard(arr);\n        setGame(true);\n        setCounter(1);\n        setMessage(\"\");\n    }\n\n    return (\n        <div className='connect4'>\n            <header>Connect 4</header>\n            <Board board={board} updateBoard={updateBoard} />\n            <button onClick={resetBoard}>Restart</button>\n            <p>{message}</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}